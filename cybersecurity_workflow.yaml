# yaml-language-server: $schema=https://raw.githubusercontent.com/julep-ai/julep/refs/heads/dev/schemas/create_task_request.json
name: Cyber security workflow using Julep
description: A cybersecurity workflow using Julep where vulnerability is for a site/domain given in prompt 

########################################################
################### INPUT SCHEMA #######################
########################################################

input_schema:
  type: object
  properties:
    locations:
      type: array
      items:
        type: string
      description:  The IP address or domain to scan.

########################################################
################### TOOLS ##############################
########################################################

tools:
- name: nmap
  type: integration
  integration:
    provider:  # 

- name: ffuf
  type: integration
  integration:
    provider: #
    setup:
      openweathermap_api_key: "YOUR_OPENWEATHERMAP_API_KEY"

- name: sqlmap
  type: integration
  integration:
    provider: #
    setup:
      brave_api_key: "YOUR_BRAVE_API_KEY"

########################################################
################### MAIN WORKFLOW ######################
########################################################

main:
- over: $ steps[0].input.locations
  map:
    tool: weather
    arguments:
      location: $ _

- over: $ steps[0].input.locations
  map:
    tool: internet_search
    arguments:
      query: $ 'tourist attractions in ' + _

# Zip locations, weather, and attractions into a list of tuples [(location, weather, attractions)]
- evaluate:
    zipped: |-
      $ list(
        zip(
          steps[0].input.locations,
          [output['result'] for output in steps[0].output],
          steps[1].output
        )
      )


- over: $ _['zipped']
  parallelism: 3
  # Inside the map step, each `_` represents the current element in the list
  # which is a tuple of (location, weather, attractions)
  map:
    prompt:
    - role: system
      content: >-
        $ f'''You are {agent.name}. Your task is to create a detailed itinerary
        for visiting tourist attractions in some locations.
        The user will give you the following information for each location:

        - The location
        - The current weather condition
        - The top tourist attractions'''
    - role: user
      content: >-
        $ f'''Location: "{_[0]}"
        Weather: "{_[1]}"
        Attractions: "{_[2]}"'''
    unwrap: true

- evaluate:
    final_plan: |-
      $ '\\n---------------\\n'.join(activity for activity in _)